# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.

Author: Kanak Tenguria
"""
import os
import pickle
import random
import numpy as np
import matplotlib.pyplot as plot
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

def load(file_name):
    with open(file_name, 'rb') as fp:
        obj = pickle.load(fp)
    return obj

# # Load data for training and testing
X_train = load('DataFiles/X_train.pck')
y_train = load('DataFiles/y_train.pck')
X_test = load('DataFiles/X_test.pck')
y_test = load('DataFiles/y_test.pck')
X_valid = load('DataFiles/X_valid.pck')
y_valid = load('DataFiles/y_valid.pck')
pred_image = load('DataFiles/pred_image.pck')

# # Flatten data for Random Forest
X_train = X_train.reshape(11034,12288)
X_test = X_test.reshape(3000, 12288)
X_valid = X_valid.reshape(3000, 12288)
pred_image_flatten = pred_image.reshape(7301,12288)

def getLabel(class_index):
    labels = {0: 'buildings', 1: 'forest', 2: 'glacier', 3: 'mountain', 4: 'sea', 5: 'street'}
    return labels[class_index]

'''Training'''

# modelRF = RandomForestClassifier(n_estimators = 500)
#
# modelRF.fit(X_train, y_train)
#
# y_pred = modelRF.predict(X_test)
#
# print('Test Accuracy:', accuracy_score(y_test, y_pred))
#
# print('Test Classification report')
# print(classification_report(y_pred, y_test))
#
# print('Test Confusion report')
# print(confusion_matrix(y_pred, y_test))
#
# # Save Model
# filename = 'RandomForest_Model/RF_model.sav'
# pickle.dump(modelRF, open(filename, 'wb'))

'''Testing'''

# # Load saved model
filename = 'RandomForest_Model/RF_model.sav'

loaded_model = pickle.load(open(filename, 'rb'))

# # # Evaluate the model on test data and validation data------
y_pred = loaded_model.predict(X_test)
y_pred_valid = loaded_model.predict(X_valid)

print('Valid Accuracy:', accuracy_score(y_valid, y_pred_valid))
print('Test Accuracy:', accuracy_score(y_test, y_pred))

print('Test Classification report')
print(classification_report(y_pred, y_test))

print('Test Confusion report')
print(confusion_matrix(y_pred, y_test))
# # -----------------------------------------------------------

# # Prediction on un-labelled data ----------------------------
y_pred_test = loaded_model.predict(pred_image_flatten)

f,ax = plot.subplots(3,3)
for i in range(0,3,1):
    for j in range(0,3,1):
        rnd_number = random.randint(0, len(pred_image))
        ax[i,j].imshow(pred_image[rnd_number])
        ax[i,j].set_title(getLabel(y_pred_test[rnd_number]))
        ax[i,j].axis('off')
plot.show()
# # -----------------------------------------------------------